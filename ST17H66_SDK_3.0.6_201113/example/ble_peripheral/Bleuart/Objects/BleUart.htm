<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BleUart.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BleUart.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Nov 18 10:08:41 2020
<BR><P>
<H3>Maximum Stack Usage =       1092 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
GAPRole_ProcessEvent &rArr; gapRole_ProcessOSALMsg &rArr; gapRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_UpdateCharCfg &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ATT_BuildErrorRsp</a> from att_util.o(i.ATT_BuildErrorRsp) referenced from att_server.o(i.ATT_ErrorRsp)
 <LI><a href="#[24]">ATT_BuildExchangeMTURsp</a> from att_util.o(i.ATT_BuildExchangeMTURsp) referenced from att_server.o(i.ATT_ExchangeMTURsp)
 <LI><a href="#[25]">ATT_BuildFindByTypeValueRsp</a> from att_util.o(i.ATT_BuildFindByTypeValueRsp) referenced from att_server.o(i.ATT_FindByTypeValueRsp)
 <LI><a href="#[26]">ATT_BuildFindInfoRsp</a> from att_util.o(i.ATT_BuildFindInfoRsp) referenced from att_server.o(i.ATT_FindInfoRsp)
 <LI><a href="#[27]">ATT_BuildHandleValueInd</a> from att_util.o(i.ATT_BuildHandleValueInd) referenced from att_server.o(i.ATT_HandleValueInd)
 <LI><a href="#[27]">ATT_BuildHandleValueInd</a> from att_util.o(i.ATT_BuildHandleValueInd) referenced from att_server.o(i.ATT_HandleValueNoti)
 <LI><a href="#[28]">ATT_BuildPrepareWriteRsp</a> from att_util.o(i.ATT_BuildPrepareWriteRsp) referenced from att_server.o(i.ATT_PrepareWriteRsp)
 <LI><a href="#[29]">ATT_BuildReadBlobRsp</a> from att_util.o(i.ATT_BuildReadBlobRsp) referenced from att_server.o(i.ATT_ReadBlobRsp)
 <LI><a href="#[2a]">ATT_BuildReadByGrpTypeRsp</a> from att_util.o(i.ATT_BuildReadByGrpTypeRsp) referenced from att_server.o(i.ATT_ReadByGrpTypeRsp)
 <LI><a href="#[2b]">ATT_BuildReadByTypeRsp</a> from att_util.o(i.ATT_BuildReadByTypeRsp) referenced from att_server.o(i.ATT_ReadByTypeRsp)
 <LI><a href="#[2c]">ATT_BuildReadMultiRsp</a> from att_util.o(i.ATT_BuildReadMultiRsp) referenced from att_server.o(i.ATT_ReadMultiRsp)
 <LI><a href="#[2d]">ATT_BuildReadRsp</a> from att_util.o(i.ATT_BuildReadRsp) referenced from att_server.o(i.ATT_ReadRsp)
 <LI><a href="#[53]">ATT_ParseExchangeMTUReq</a> from att_util.o(i.ATT_ParseExchangeMTUReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[64]">ATT_ParseExecuteWriteReq</a> from att_util.o(i.ATT_ParseExecuteWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[57]">ATT_ParseFindByTypeValueReq</a> from att_util.o(i.ATT_ParseFindByTypeValueReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[55]">ATT_ParseFindInfoReq</a> from att_util.o(i.ATT_ParseFindInfoReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[63]">ATT_ParsePrepareWriteReq</a> from att_util.o(i.ATT_ParsePrepareWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[5d]">ATT_ParseReadBlobReq</a> from att_util.o(i.ATT_ParseReadBlobReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[59]">ATT_ParseReadByTypeReq</a> from att_util.o(i.ATT_ParseReadByTypeReq) referenced 2 times from gatt_server.o(.constdata)
 <LI><a href="#[5e]">ATT_ParseReadMultiReq</a> from att_util.o(i.ATT_ParseReadMultiReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[5b]">ATT_ParseReadReq</a> from att_util.o(i.ATT_ParseReadReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[61]">ATT_ParseWriteReq</a> from att_util.o(i.ATT_ParseWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[2]">BleUart_ProcessPairStateCB</a> from bleuart.o(i.BleUart_ProcessPairStateCB) referenced 2 times from bleuart.o(.data)
 <LI><a href="#[1]">BleUart_ProcessPasscodeCB</a> from bleuart.o(i.BleUart_ProcessPasscodeCB) referenced 2 times from bleuart.o(.data)
 <LI><a href="#[50]">GAPRole_ProcessEvent</a> from peripheral.o(i.GAPRole_ProcessEvent) referenced from osal_bleuart.o(.constdata)
 <LI><a href="#[4d]">GAP_ProcessEvent</a> from gap_task.o(i.GAP_ProcessEvent) referenced from osal_bleuart.o(.constdata)
 <LI><a href="#[51]">GATTServApp_ProcessEvent</a> from gattservapp.o(i.GATTServApp_ProcessEvent) referenced from osal_bleuart.o(.constdata)
 <LI><a href="#[4e]">GATT_ProcessEvent</a> from gatt_task.o(i.GATT_ProcessEvent) referenced from osal_bleuart.o(.constdata)
 <LI><a href="#[4b]">HCI_ProcessEvent</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from osal_bleuart.o(.constdata)
 <LI><a href="#[34]">L2CAP_BuildCmdReject</a> from l2cap_util.o(i.L2CAP_BuildCmdReject) referenced from l2cap_if.o(i.L2CAP_CmdReject)
 <LI><a href="#[4c]">L2CAP_ProcessEvent</a> from l2cap_task.o(i.L2CAP_ProcessEvent) referenced from osal_bleuart.o(.constdata)
 <LI><a href="#[11]">LL_ENC_AES128_Encrypt1</a> from patch.o(i.LL_ENC_AES128_Encrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[13]">LL_ENC_Decrypt1</a> from patch.o(i.LL_ENC_Decrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[12]">LL_ENC_Encrypt1</a> from patch.o(i.LL_ENC_Encrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[e]">LL_IRQHandler1</a> from patch.o(i.LL_IRQHandler1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[4a]">LL_ProcessEvent</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from osal_bleuart.o(.constdata)
 <LI><a href="#[14]">LL_SetAdvParam1</a> from patch.o(i.LL_SetAdvParam1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[9]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[4f]">SM_ProcessEvent</a> from sm_task.o(i.SM_ProcessEvent) referenced from osal_bleuart.o(.constdata)
 <LI><a href="#[b]">SystemInit</a> from system_armcm0.o(i.SystemInit) referenced from startup_armcm0.o(.text)
 <LI><a href="#[c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm0.o(.text)
 <LI><a href="#[37]">bleuart_HandleConnStatusCB</a> from bleuart_service.o(i.bleuart_HandleConnStatusCB) referenced from bleuart_service.o(i.bleuart_AddService)
 <LI><a href="#[52]">bleuart_ProcessEvent</a> from bleuart.o(i.bleuart_ProcessEvent) referenced from osal_bleuart.o(.constdata)
 <LI><a href="#[48]">bleuart_ReadAttrCB</a> from bleuart_service.o(i.bleuart_ReadAttrCB) referenced from bleuart_service.o(.constdata)
 <LI><a href="#[0]">bleuart_StateNotificationCB</a> from bleuart.o(i.bleuart_StateNotificationCB) referenced 2 times from bleuart.o(.data)
 <LI><a href="#[49]">bleuart_WriteAttrCB</a> from bleuart_service.o(i.bleuart_WriteAttrCB) referenced from bleuart_service.o(.constdata)
 <LI><a href="#[1d]">devInfo_ReadAttrCB</a> from devinfoservice.o(i.devInfo_ReadAttrCB) referenced from devinfoservice.o(.constdata)
 <LI><a href="#[3]">gapPeriProcessHCICmdCompleteEvt</a> from gap_peridevmgr.o(i.gapPeriProcessHCICmdCompleteEvt) referenced 2 times from gap_peridevmgr.o(.data)
 <LI><a href="#[4]">gapProcessAdvertisingEvt</a> from gap_peridevmgr.o(i.gapProcessAdvertisingEvt) referenced 2 times from gap_peridevmgr.o(.data)
 <LI><a href="#[5]">gapSetAdvParams</a> from gap_peridevmgr.o(i.gapSetAdvParams) referenced 2 times from gap_peridevmgr.o(.data)
 <LI><a href="#[54]">gattProcessExchangeMTUReq</a> from gatt_server.o(i.gattProcessExchangeMTUReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[65]">gattProcessExecuteWriteReq</a> from gatt_server.o(i.gattProcessExecuteWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[58]">gattProcessFindByTypeValueReq</a> from gatt_server.o(i.gattProcessFindByTypeValueReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[56]">gattProcessFindInfoReq</a> from gatt_server.o(i.gattProcessFindInfoReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[60]">gattProcessReadByGrpTypeReq</a> from gatt_server.o(i.gattProcessReadByGrpTypeReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[5a]">gattProcessReadByTypeReq</a> from gatt_server.o(i.gattProcessReadByTypeReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[5f]">gattProcessReadMultiReq</a> from gatt_server.o(i.gattProcessReadMultiReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[5c]">gattProcessReadReq</a> from gatt_server.o(i.gattProcessReadReq) referenced 2 times from gatt_server.o(.constdata)
 <LI><a href="#[62]">gattProcessWriteReq</a> from gatt_server.o(i.gattProcessWriteReq) referenced 2 times from gatt_server.o(.constdata)
 <LI><a href="#[30]">gattServApp_HandleConnStatusCB</a> from gattservapp.o(i.gattServApp_HandleConnStatusCB) referenced from gattservapp.o(i.GATTServApp_Init)
 <LI><a href="#[46]">gattServApp_WriteAttrCB</a> from gattservapp.o(i.gattServApp_WriteAttrCB) referenced from gattservapp.o(.constdata)
 <LI><a href="#[33]">gattServerHandleConnStatusCB</a> from gatt_server.o(i.gattServerHandleConnStatusCB) referenced from gatt_server.o(i.GATT_InitServer)
 <LI><a href="#[31]">gattServerHandleTimerCB</a> from gatt_server.o(i.gattServerHandleTimerCB) referenced from gatt_server.o(i.GATT_Indication)
 <LI><a href="#[32]">gattServerProcessMsgCB</a> from gatt_server.o(i.gattServerProcessMsgCB) referenced from gatt_server.o(i.GATT_InitServer)
 <LI><a href="#[44]">ggs_ReadAttrCB</a> from gapgattserver.o(i.ggs_ReadAttrCB) referenced from gapgattserver.o(.constdata)
 <LI><a href="#[45]">ggs_WriteAttrCB</a> from gapgattserver.o(i.ggs_WriteAttrCB) referenced from gapgattserver.o(.constdata)
 <LI><a href="#[1c]">hal_UART0_IRQHandler</a> from uart.o(i.hal_UART0_IRQHandler) referenced from uart.o(i.uart_hw_init)
 <LI><a href="#[1c]">hal_UART0_IRQHandler</a> from uart.o(i.hal_UART0_IRQHandler) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[1b]">hal_UART1_IRQHandler</a> from uart.o(i.hal_UART1_IRQHandler) referenced from uart.o(i.uart_hw_init)
 <LI><a href="#[17]">hal_gpio_sleep_handler</a> from gpio.o(i.hal_gpio_sleep_handler) referenced from gpio.o(i.hal_gpio_init)
 <LI><a href="#[16]">hal_gpio_wakeup_handler</a> from gpio.o(i.hal_gpio_wakeup_handler) referenced from gpio.o(i.hal_gpio_init)
 <LI><a href="#[1f]">hal_pwrmgr_sleep_process</a> from pwrmgr.o(i.hal_pwrmgr_sleep_process) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[20]">hal_pwrmgr_wakeup_process</a> from pwrmgr.o(i.hal_pwrmgr_wakeup_process) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[22]">hard_fault</a> from jump_table.o(i.hard_fault) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[18]">hw_spif_cache_config</a> from flash.o(i.hw_spif_cache_config) referenced from flash.o(i.hal_spif_cache_init)
 <LI><a href="#[35]">l2capBuildParamUpdateReq</a> from l2cap_util.o(i.l2capBuildParamUpdateReq) referenced from l2cap_if.o(i.L2CAP_ConnParamUpdateReq)
 <LI><a href="#[39]">l2capHandleTimerCB</a> from l2cap_util.o(i.l2capHandleTimerCB) referenced from l2cap_util.o(i.l2capSendReq)
 <LI><a href="#[15]">l2capPocessFragmentTxData</a> from l2cap_util.o(_section_sram_code_) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[d]">ll_hw_go1</a> from patch.o(i.ll_hw_go1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2e]">on_BUP_Evt</a> from bleuart.o(i.on_BUP_Evt) referenced from bleuart_protocol.o(i.AT_setdata)
 <LI><a href="#[2e]">on_BUP_Evt</a> from bleuart.o(i.on_BUP_Evt) referenced from bleuart.o(i.bleuart_Init)
 <LI><a href="#[38]">on_bleuartServiceEvt</a> from bleuart.o(i.on_bleuartServiceEvt) referenced from bleuart.o(i.bleuart_Init)
 <LI><a href="#[1e]">osalInitTasks</a> from osal_bleuart.o(i.osalInitTasks) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[f]">rf_calibrate1</a> from rf_phy_driver.o(i.rf_calibrate1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[10]">rf_phy_change_cfg0</a> from rf_phy_driver.o(i.rf_phy_change_cfg0) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[21]">rf_phy_ini</a> from rf_phy_driver.o(i.rf_phy_ini) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[36]">smLinkCheck</a> from sm_pairing.o(i.smLinkCheck) referenced from sm_task.o(i.SM_Init)
 <LI><a href="#[8]">smResponderProcessLTKReq</a> from sm_rsppairing.o(i.smResponderProcessLTKReq) referenced 2 times from sm_rsppairing.o(.data)
 <LI><a href="#[7]">smResponderSendNextKeyInfo</a> from sm_rsppairing.o(i.smResponderSendNextKeyInfo) referenced 2 times from sm_rsppairing.o(.data)
 <LI><a href="#[3e]">smpBuildEncInfo</a> from smp.o(i.smpBuildEncInfo) referenced from sm_pairing.o(i.smPairingSendEncInfo)
 <LI><a href="#[3f]">smpBuildIdentityAddrInfo</a> from smp.o(i.smpBuildIdentityAddrInfo) referenced from sm_pairing.o(i.smPairingSendIdentityAddrInfo)
 <LI><a href="#[40]">smpBuildIdentityInfo</a> from smp.o(i.smpBuildIdentityInfo) referenced from sm_pairing.o(i.smPairingSendIdentityInfo)
 <LI><a href="#[41]">smpBuildMasterID</a> from smp.o(i.smpBuildMasterID) referenced from sm_pairing.o(i.smPairingSendMasterID)
 <LI><a href="#[3a]">smpBuildPairingConfirm</a> from smp.o(i.smpBuildPairingConfirm) referenced from sm_pairing.o(i.smGenerateConfirm)
 <LI><a href="#[43]">smpBuildPairingFailed</a> from smp.o(i.smpBuildPairingFailed) referenced from sm_pairing.o(i.smSendFailAndEnd)
 <LI><a href="#[3d]">smpBuildPairingRandom</a> from smp.o(i.smpBuildPairingRandom) referenced from sm_pairing.o(i.smGenerateRandMsg)
 <LI><a href="#[3b]">smpBuildPairingReq</a> from smp.o(i.smpBuildPairingReq) referenced from sm_pairing.o(i.smGeneratePairingReqRsp)
 <LI><a href="#[3c]">smpBuildPairingRsp</a> from smp.o(i.smpBuildPairingRsp) referenced from sm_pairing.o(i.smGeneratePairingReqRsp)
 <LI><a href="#[2f]">smpBuildSecurityReq</a> from smp.o(i.smpBuildSecurityReq) referenced from gap_perilinkmgr.o(i.GAP_SendSlaveSecurityRequest)
 <LI><a href="#[42]">smpBuildSigningInfo</a> from smp.o(i.smpBuildSigningInfo) referenced from sm_pairing.o(i.smPairingSendSingingInfo)
 <LI><a href="#[6]">smpResponderProcessIncoming</a> from sm_rsppairing.o(i.smpResponderProcessIncoming) referenced 2 times from sm_rsppairing.o(.data)
 <LI><a href="#[47]">uart_evt_hdl</a> from bleuart_protocol.o(i.uart_evt_hdl) referenced from bleuart_protocol.o(.constdata)
 <LI><a href="#[1a]">uart_wakeup_process_0</a> from uart.o(i.uart_wakeup_process_0) referenced from uart.o(i.hal_uart_init)
 <LI><a href="#[19]">uart_wakeup_process_1</a> from uart.o(i.uart_wakeup_process_1) referenced from uart.o(i.hal_uart_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[166]"></a>HCI_DisconnectCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq (via Veneer)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext (via Veneer)
</UL>

<P><STRONG><a name="[14f]"></a>HCI_GAPTaskRegister</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init (via Veneer)
</UL>

<P><STRONG><a name="[19b]"></a>HCI_HostNumCompletedPktCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts (via Veneer)
</UL>

<P><STRONG><a name="[202]"></a>HCI_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[19d]"></a>HCI_L2CAPTaskRegister</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init (via Veneer)
</UL>

<P><STRONG><a name="[225]"></a>HCI_LE_LtkReqNegReplyCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq (via Veneer)
</UL>

<P><STRONG><a name="[226]"></a>HCI_LE_LtkReqReplyCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq (via Veneer)
</UL>

<P><STRONG><a name="[222]"></a>HCI_LE_RandCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete (via Veneer)
</UL>

<P><STRONG><a name="[1d6]"></a>HCI_LE_ReadBufSizeCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus (via Veneer)
</UL>

<P><STRONG><a name="[167]"></a>HCI_LE_SetAdvDataCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
</UL>

<P><STRONG><a name="[14c]"></a>HCI_LE_SetAdvEnableCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParamsStatus (via Veneer)
</UL>

<P><STRONG><a name="[1dc]"></a>HCI_LE_SetAdvParamCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams (via Veneer)
</UL>

<P><STRONG><a name="[1d4]"></a>HCI_LE_SetRandomAddressCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr (via Veneer)
</UL>

<P><STRONG><a name="[168]"></a>HCI_LE_SetScanRspDataCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
</UL>

<P><STRONG><a name="[4b]"></a>HCI_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_bleuart.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>HCI_ReadBDADDRCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit (via Veneer)
</UL>

<P><STRONG><a name="[138]"></a>HCI_ReadRssiCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[1b1]"></a>HCI_SMPTaskRegister</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init (via Veneer)
</UL>

<P><STRONG><a name="[f0]"></a>HCI_SendDataPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_SendDataPkt (via Veneer)
</UL>

<P><STRONG><a name="[1a7]"></a>HCI_bm_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc (via Veneer)
</UL>

<P><STRONG><a name="[78]"></a>LL_ENC_AES128_Encrypt0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[79]"></a>LL_ENC_Decrypt0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[7a]"></a>LL_ENC_Encrypt0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[206]"></a>LL_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncryptLocal (via Veneer)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncrypt (via Veneer)
</UL>

<P><STRONG><a name="[201]"></a>LL_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[d3]"></a>LL_InitConnectContext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init (via Veneer)
</UL>

<P><STRONG><a name="[4a]"></a>LL_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_bleuart.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>LL_Rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_check_lenze_app_data (via Veneer)
</UL>

<P><STRONG><a name="[89]"></a>LL_SetAdvParam0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam1 (via Veneer)
</UL>

<P><STRONG><a name="[19a]"></a>LL_TX_bm_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_bm_alloc (via Veneer)
</UL>

<P><STRONG><a name="[92]"></a>WaitRTCCount</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration (via Veneer)
</UL>

<P><STRONG><a name="[ee]"></a>clk_get_pclk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init (via Veneer)
</UL>

<P><STRONG><a name="[c7]"></a>clk_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init (via Veneer)
</UL>

<P><STRONG><a name="[cb]"></a>disableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[a3]"></a>drv_disable_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unregister (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_tx_buf (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush (via Veneer)
</UL>

<P><STRONG><a name="[a4]"></a>drv_enable_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unregister (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_tx_buf (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush (via Veneer)
</UL>

<P><STRONG><a name="[e0]"></a>drv_irq_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[8d]"></a>efuse_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check (via Veneer)
</UL>

<P><STRONG><a name="[72]"></a>enableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config (via Veneer)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[85]"></a>llSecAdvAllow</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[86]"></a>llSetupSecAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[88]"></a>llSetupSecInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[87]"></a>llSetupSecScan</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[7c]"></a>ll_debug_output</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[7f]"></a>ll_hw_clr_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[7d]"></a>ll_hw_get_irq_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[de]"></a>ll_hw_get_tr_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
</UL>

<P><STRONG><a name="[e6]"></a>ll_hw_set_crc_fmt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg (via Veneer)
</UL>

<P><STRONG><a name="[e8]"></a>ll_hw_tx2rx_timing_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini (via Veneer)
</UL>

<P><STRONG><a name="[7e]"></a>ll_processBasicIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[80]"></a>ll_processExtAdvIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[82]"></a>ll_processExtInitIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[81]"></a>ll_processExtScanIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[83]"></a>ll_processPrdAdvIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[84]"></a>ll_processPrdScanIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[1ea]"></a>osal_CbTimerStart</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq (via Veneer)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStartTimer (via Veneer)
</UL>

<P><STRONG><a name="[1eb]"></a>osal_CbTimerStop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStopTimer (via Veneer)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStopTimer (via Veneer)
</UL>

<P><STRONG><a name="[1a8]"></a>osal_bm_adjust_header</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
</UL>

<P><STRONG><a name="[1a1]"></a>osal_bm_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessOSALMsg (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSarBufReset (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SegmentPkt_Reset (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset (via Veneer)
</UL>

<P><STRONG><a name="[140]"></a>osal_get_timeoutEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
</UL>

<P><STRONG><a name="[94]"></a>osal_init_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[123]"></a>osal_isbufset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SecParamsInit (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
</UL>

<P><STRONG><a name="[152]"></a>osal_mem_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey (via Veneer)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo (via Veneer)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessSigningInfo (via Veneer)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessEncryptionInformation (via Veneer)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
</UL>

<P><STRONG><a name="[145]"></a>osal_mem_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond (via Veneer)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink (via Veneer)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams (via Veneer)
</UL>

<P><STRONG><a name="[d2]"></a>osal_mem_set_heap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init (via Veneer)
</UL>

<P><STRONG><a name="[f4]"></a>osal_memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ReadAttrCB (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming (via Veneer)
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs (via Veneer)
</UL>

<P><STRONG><a name="[77]"></a>osal_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write (via Veneer)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devInfo_ReadAttrCB (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_simple_WriteAttrCB (via Veneer)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq (via Veneer)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ReadAttrCB (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_SetParameter (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseWriteReq (via Veneer)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseReadByTypeReq (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePrepareWriteReq (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseFindByTypeValueReq (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ConvertUUIDto128 (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadRsp (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadMultiRsp (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadByTypeRsp (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadByGrpTypeRsp (via Veneer)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadBlobRsp (via Veneer)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildPrepareWriteRsp (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildHandleValueInd (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildFindInfoRsp (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_check_lenze_app_data (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete (via Veneer)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo (via Veneer)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID (via Veneer)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo (via Veneer)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg (via Veneer)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq (via Veneer)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessSigningInfo (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingConfirm (via Veneer)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessMasterID (via Veneer)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessEncryptionInformation (via Veneer)
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs (via Veneer)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter (via Veneer)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent (via Veneer)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSigningInfo (via Veneer)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingRandom (via Veneer)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingConfirm (via Veneer)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseMasterID (via Veneer)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityInfo (via Veneer)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityAddrInfo (via Veneer)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseEncInfo (via Veneer)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildSigningInfo (via Veneer)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingRandom (via Veneer)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingConfirm (via Veneer)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildMasterID (via Veneer)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildIdentityInfo (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildIdentityAddrInfo (via Veneer)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildEncInfo (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new (via Veneer)
</UL>

<P><STRONG><a name="[146]"></a>osal_memdup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
</UL>

<P><STRONG><a name="[98]"></a>osal_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_simple_WriteAttrCB (via Veneer)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_SetNumPrepareWrites (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq (via Veneer)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo (via Veneer)
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove (via Veneer)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent (via Veneer)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new (via Veneer)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah (via Veneer)
</UL>

<P><STRONG><a name="[17d]"></a>osal_msg_allocate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvDataStatus (via Veneer)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent (via Veneer)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent (via Veneer)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent (via Veneer)
</UL>

<P><STRONG><a name="[136]"></a>osal_msg_deallocate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[134]"></a>osal_msg_receive</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[15b]"></a>osal_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvDataStatus (via Veneer)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent (via Veneer)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent (via Veneer)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent (via Veneer)
</UL>

<P><STRONG><a name="[95]"></a>osal_pwrmgr_device</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[20c]"></a>osal_rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf (via Veneer)
</UL>

<P><STRONG><a name="[1ac]"></a>osal_revmemcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig (via Veneer)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1 (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new (via Veneer)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah (via Veneer)
</UL>

<P><STRONG><a name="[13e]"></a>osal_set_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_evt_hdl (via Veneer)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bleuartServiceEvt (via Veneer)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init (via Veneer)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIncSignCounter (via Veneer)
</UL>

<P><STRONG><a name="[154]"></a>osal_start_reload_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
</UL>

<P><STRONG><a name="[96]"></a>osal_start_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[115]"></a>osal_start_timerEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_evt_hdl (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartrx_timeout_timer_start (via Veneer)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_start_timer (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_BLE_to_uart (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent (via Veneer)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer (via Veneer)
</UL>

<P><STRONG><a name="[13b]"></a>osal_stop_timerEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_evt_hdl (via Veneer)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartrx_timeout_timer_stop (via Veneer)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt (via Veneer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStopRspTimer (via Veneer)
</UL>

<P><STRONG><a name="[17a]"></a>osal_strlen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
</UL>

<P><STRONG><a name="[7b]"></a>read_current_fine_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[8b]"></a>rtc_get_counter</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs (via Veneer)
</UL>

<P><STRONG><a name="[73]"></a>setSleepMode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config (via Veneer)
</UL>

<P><STRONG><a name="[df]"></a>set_max_length</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
</UL>

<P><STRONG><a name="[90]"></a>spif_cmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
</UL>

<P><STRONG><a name="[dc]"></a>spif_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config (via Veneer)
</UL>

<P><STRONG><a name="[a6]"></a>spif_erase_sector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector (via Veneer)
</UL>

<P><STRONG><a name="[91]"></a>spif_rddata</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
</UL>

<P><STRONG><a name="[a7]"></a>spif_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
</UL>

<P><STRONG><a name="[ef]"></a>L2CAP_Fragment_SendDataPkt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, l2cap_util.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendDataPkt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSegmentBuffToLinkLayer
</UL>

<P><STRONG><a name="[f1]"></a>l2capSegmentBuffToLinkLayer</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, l2cap_util.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l2capSegmentBuffToLinkLayer &rArr; L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPocessFragmentTxData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>

<P><STRONG><a name="[15]"></a>l2capPocessFragmentTxData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2cap_util.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2capPocessFragmentTxData &rArr; l2capSegmentBuffToLinkLayer &rArr; L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSegmentBuffToLinkLayer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[23]"></a>ATT_BuildErrorRsp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildErrorRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ErrorRsp)
</UL>
<P><STRONG><a name="[24]"></a>ATT_BuildExchangeMTURsp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildExchangeMTURsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ExchangeMTURsp)
</UL>
<P><STRONG><a name="[25]"></a>ATT_BuildFindByTypeValueRsp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildFindByTypeValueRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildFindByTypeValueRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_FindByTypeValueRsp)
</UL>
<P><STRONG><a name="[26]"></a>ATT_BuildFindInfoRsp</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, att_util.o(i.ATT_BuildFindInfoRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ATT_BuildFindInfoRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_FindInfoRsp)
</UL>
<P><STRONG><a name="[27]"></a>ATT_BuildHandleValueInd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildHandleValueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildHandleValueInd
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> att_server.o(i.ATT_HandleValueInd)
<LI> att_server.o(i.ATT_HandleValueNoti)
</UL>
<P><STRONG><a name="[28]"></a>ATT_BuildPrepareWriteRsp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildPrepareWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildPrepareWriteRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_PrepareWriteRsp)
</UL>
<P><STRONG><a name="[29]"></a>ATT_BuildReadBlobRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadBlobRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadBlobRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadBlobRsp)
</UL>
<P><STRONG><a name="[2a]"></a>ATT_BuildReadByGrpTypeRsp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadByGrpTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadByGrpTypeRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadByGrpTypeRsp)
</UL>
<P><STRONG><a name="[2b]"></a>ATT_BuildReadByTypeRsp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadByTypeRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadByTypeRsp)
</UL>
<P><STRONG><a name="[2c]"></a>ATT_BuildReadMultiRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadMultiRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadMultiRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadMultiRsp)
</UL>
<P><STRONG><a name="[2d]"></a>ATT_BuildReadRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadRsp)
</UL>
<P><STRONG><a name="[f2]"></a>ATT_CompareUUID</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, att_util.o(i.ATT_CompareUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ConvertUUIDto128
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpTypeReq
</UL>

<P><STRONG><a name="[f3]"></a>ATT_ConvertUUIDto128</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, att_util.o(i.ATT_ConvertUUIDto128))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>

<P><STRONG><a name="[f5]"></a>ATT_ErrorRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ErrorRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
</UL>

<P><STRONG><a name="[f7]"></a>ATT_ExchangeMTURsp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, att_server.o(i.ATT_ExchangeMTURsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ATT_ExchangeMTURsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[f9]"></a>ATT_ExecuteWriteRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ExecuteWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ExecuteWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
</UL>

<P><STRONG><a name="[fa]"></a>ATT_FindByTypeValueRsp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_server.o(i.ATT_FindByTypeValueRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_FindByTypeValueRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[fb]"></a>ATT_FindInfoRsp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, att_server.o(i.ATT_FindInfoRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_FindInfoRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
</UL>

<P><STRONG><a name="[1f4]"></a>ATT_GetCurrentMTUSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, att_util.o(i.ATT_GetCurrentMTUSize))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff
</UL>

<P><STRONG><a name="[fc]"></a>ATT_HandleValueInd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_HandleValueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[fd]"></a>ATT_HandleValueNoti</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_HandleValueNoti))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
</UL>

<P><STRONG><a name="[18c]"></a>ATT_InitMtuSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, att_util.o(i.ATT_InitMtuSize))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
</UL>

<P><STRONG><a name="[53]"></a>ATT_ParseExchangeMTUReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseExchangeMTUReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>ATT_ParseExecuteWriteReq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseExecuteWriteReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>ATT_ParseFindByTypeValueReq</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, att_util.o(i.ATT_ParseFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ParseFindByTypeValueReq
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>ATT_ParseFindInfoReq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseFindInfoReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>ATT_ParsePacket</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, att_util.o(i.ATT_ParsePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ATT_ParsePacket &rArr; SM_VerifyAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
</UL>

<P><STRONG><a name="[63]"></a>ATT_ParsePrepareWriteReq</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, att_util.o(i.ATT_ParsePrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParsePrepareWriteReq
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>ATT_ParseReadBlobReq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseReadBlobReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>ATT_ParseReadByTypeReq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, att_util.o(i.ATT_ParseReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParseReadByTypeReq
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>ATT_ParseReadMultiReq</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, att_util.o(i.ATT_ParseReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ATT_ParseReadMultiReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>ATT_ParseReadReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseReadReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>ATT_ParseWriteReq</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, att_util.o(i.ATT_ParseWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ParseWriteReq
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>ATT_PrepareWriteRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_PrepareWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_PrepareWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
</UL>

<P><STRONG><a name="[101]"></a>ATT_ReadBlobRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadBlobRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadBlobRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[102]"></a>ATT_ReadByGrpTypeRsp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadByGrpTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadByGrpTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
</UL>

<P><STRONG><a name="[103]"></a>ATT_ReadByTypeRsp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadByTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
</UL>

<P><STRONG><a name="[104]"></a>ATT_ReadMultiRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadMultiRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadMultiRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
</UL>

<P><STRONG><a name="[105]"></a>ATT_ReadRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[f8]"></a>ATT_UpdateMtuSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, att_util.o(i.ATT_UpdateMtuSize))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[106]"></a>ATT_WriteRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_WriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_WriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
</UL>

<P><STRONG><a name="[107]"></a>AT_Response</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bleuart_protocol.o(i.AT_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AT_Response &rArr; hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff (via Veneer)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query
</UL>

<P><STRONG><a name="[108]"></a>AT_Response2</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, bleuart_protocol.o(i.AT_Response2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AT_Response2 &rArr; hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff (via Veneer)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_setdata
</UL>

<P><STRONG><a name="[109]"></a>AT_query</STRONG> (Thumb, 1508 bytes, Stack size 152 bytes, bleuart_protocol.o(i.AT_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = AT_query &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Response
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
</UL>

<P><STRONG><a name="[111]"></a>AT_setdata</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, bleuart_protocol.o(i.AT_setdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = AT_setdata &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Response2
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
</UL>

<P><STRONG><a name="[113]"></a>BUP_connect_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bleuart_protocol.o(i.BUP_connect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUP_connect_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bleuartServiceEvt
</UL>

<P><STRONG><a name="[114]"></a>BUP_data_BLE_to_uart</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bleuart_protocol.o(i.BUP_data_BLE_to_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BUP_data_BLE_to_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bleuartServiceEvt
</UL>

<P><STRONG><a name="[116]"></a>BUP_data_BLE_to_uart_completed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bleuart_protocol.o(i.BUP_data_BLE_to_uart_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BUP_data_BLE_to_uart_completed &rArr; BUP_data_BLE_to_uart_send &rArr; hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_BLE_to_uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
</UL>

<P><STRONG><a name="[117]"></a>BUP_data_BLE_to_uart_send</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bleuart_protocol.o(i.BUP_data_BLE_to_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BUP_data_BLE_to_uart_send &rArr; hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_BLE_to_uart_completed
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
</UL>

<P><STRONG><a name="[118]"></a>BUP_data_uart_to_BLE</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bleuart_protocol.o(i.BUP_data_uart_to_BLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BUP_data_uart_to_BLE &rArr; rx_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_start_timer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
</UL>

<P><STRONG><a name="[11a]"></a>BUP_data_uart_to_BLE_send</STRONG> (Thumb, 194 bytes, Stack size 272 bytes, bleuart_protocol.o(i.BUP_data_uart_to_BLE_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = BUP_data_uart_to_BLE_send &rArr; bleuart_Notify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_NotifyIsReady
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Notify
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_start_timer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_conn_interval
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
</UL>

<P><STRONG><a name="[11e]"></a>BUP_disconnect_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bleuart_protocol.o(i.BUP_disconnect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUP_disconnect_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bleuartServiceEvt
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_StateNotificationCB
</UL>

<P><STRONG><a name="[112]"></a>BUP_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bleuart_protocol.o(i.BUP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BUP_init &rArr; hal_uart_init &rArr; uart_hw_init &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_tx_buf (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_setdata
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init
</UL>

<P><STRONG><a name="[120]"></a>GAPBondMgr_LinkEst</STRONG> (Thumb, 316 bytes, Stack size 136 bytes, gapbondmgr.o(i.GAPBondMgr_LinkEst))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = GAPBondMgr_LinkEst &rArr; GATTServApp_UpdateCharCfg &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrInvertCharCfgItem
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_UpdateCharCfg
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
</UL>

<P><STRONG><a name="[11f]"></a>GAPBondMgr_PasscodeRsp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapbondmgr.o(i.GAPBondMgr_PasscodeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GAPBondMgr_PasscodeRsp &rArr; GAP_PasscodeUpdate &rArr; SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleUart_ProcessPasscodeCB
</UL>

<P><STRONG><a name="[12b]"></a>GAPBondMgr_Register</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gapbondmgr.o(i.GAPBondMgr_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAPBondMgr_Register
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterForMsg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
</UL>

<P><STRONG><a name="[121]"></a>GAPBondMgr_ResolveAddr</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, gapbondmgr.o(i.GAPBondMgr_ResolveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GAPBondMgr_ResolveAddr &rArr; gapBondMgrGetPublicAddr &rArr; osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ResolvePrivateAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[110]"></a>GAPRole_GetParameter</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, peripheral.o(i.GAPRole_GetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GAPRole_GetParameter &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_conn_interval
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_StateNotificationCB
</UL>

<P><STRONG><a name="[132]"></a>GAPRole_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral.o(i.GAPRole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAPRole_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_RegisterForHCIMsgs
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[50]"></a>GAPRole_ProcessEvent</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, peripheral.o(i.GAPRole_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = GAPRole_ProcessEvent &rArr; gapRole_ProcessOSALMsg &rArr; gapRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_UpdateCharCfg &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadRssiCmd (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_bleuart.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>GAPRole_SendUpdateParam</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, peripheral.o(i.GAPRole_SendUpdateParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GAPRole_SendUpdateParam &rArr; gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[13c]"></a>GAPRole_SetParameter</STRONG> (Thumb, 518 bytes, Stack size 32 bytes, peripheral.o(i.GAPRole_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GAPRole_SetParameter &rArr; gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_get_timeoutEx (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init
</UL>

<P><STRONG><a name="[141]"></a>GAPRole_StartDevice</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, peripheral.o(i.GAPRole_StartDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GAPRole_StartDevice &rArr; GAP_DeviceInit &rArr; GAP_SecParamsInit &rArr; smGenerateRandBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
</UL>

<P><STRONG><a name="[10c]"></a>GAPRole_TerminateConnection</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peripheral.o(i.GAPRole_TerminateConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GAPRole_TerminateConnection &rArr; GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
</UL>

<P><STRONG><a name="[122]"></a>GAP_Bond</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gap_linkmgr.o(i.GAP_Bond))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GAP_Bond &rArr; smStartEncryption
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memdup (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartEncryption
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[142]"></a>GAP_DeviceInit</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gap.o(i.GAP_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GAP_DeviceInit &rArr; GAP_SecParamsInit &rArr; smGenerateRandBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResponderInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SecParamsInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_StartDevice
</UL>

<P><STRONG><a name="[13d]"></a>GAP_EndDiscoverable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.GAP_EndDiscoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_EndDiscoverable
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvEnableCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
</UL>

<P><STRONG><a name="[131]"></a>GAP_GetParamValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gap_configmgr.o(i.GAP_GetParamValue))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingReq
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
</UL>

<P><STRONG><a name="[14d]"></a>GAP_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gap_task.o(i.GAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_Init &rArr; linkDB_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_GAPTaskRegister (via Veneer)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[137]"></a>GAP_MakeDiscoverable</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.GAP_MakeDiscoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[151]"></a>GAP_NumActiveConnections</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gap_task.o(i.GAP_NumActiveConnections))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAP_NumActiveConnections
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_NumActive
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
</UL>

<P><STRONG><a name="[148]"></a>GAP_ParamsInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gap_configmgr.o(i.GAP_ParamsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_ParamsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadBDADDRCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[129]"></a>GAP_PasscodeUpdate</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, gap_linkmgr.o(i.GAP_PasscodeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GAP_PasscodeUpdate &rArr; SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PasscodeRsp
</UL>

<P><STRONG><a name="[14a]"></a>GAP_PeriDevMgrInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.GAP_PeriDevMgrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GAP_PeriDevMgrInit &rArr; gapAllocAdvRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterPeripheral
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[4d]"></a>GAP_ProcessEvent</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, gap_task.o(i.GAP_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = GAP_ProcessEvent &rArr; gapProcessOSALMsg &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIsAdvertising
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetIRK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_bleuart.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>GAP_RegisterForHCIMsgs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_task.o(i.GAP_RegisterForHCIMsgs))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init
</UL>

<P><STRONG><a name="[12f]"></a>GAP_ResolvePrivateAddr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gap_devmgr.o(i.GAP_ResolvePrivateAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GAP_ResolvePrivateAddr &rArr; SM_ResolveRandomAddrs &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[149]"></a>GAP_SecParamsInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gap_configmgr.o(i.GAP_SecParamsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GAP_SecParamsInit &rArr; smGenerateRandBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[128]"></a>GAP_SendSlaveSecurityRequest</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gap_perilinkmgr.o(i.GAP_SendSlaveSecurityRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = GAP_SendSlaveSecurityRequest &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[12c]"></a>GAP_SetParamValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gap_configmgr.o(i.GAP_SetParamValue))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Register
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init
</UL>

<P><STRONG><a name="[124]"></a>GAP_Signable</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gap_linkmgr.o(i.GAP_Signable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_Signable
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[12a]"></a>GAP_TerminateAuth</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gap_linkmgr.o(i.GAP_TerminateAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = GAP_TerminateAuth &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PasscodeRsp
</UL>

<P><STRONG><a name="[143]"></a>GAP_TerminateLinkReq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gap_linkmgr.o(i.GAP_TerminateLinkReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectCmd (via Veneer)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
</UL>

<P><STRONG><a name="[13f]"></a>GAP_UpdateAdvertisingData</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gap_peridevmgr.o(i.GAP_UpdateAdvertisingData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GAP_UpdateAdvertisingData
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanRspDataCmd (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvDataCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
</UL>

<P><STRONG><a name="[169]"></a>GATTServApp_AddService</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GATTServApp_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init
</UL>

<P><STRONG><a name="[16a]"></a>GATTServApp_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GATTServApp_Init &rArr; gattServApp_SetNumPrepareWrites
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterForReq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_SetNumPrepareWrites
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[16b]"></a>GATTServApp_InitCharCfg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_InitCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
</UL>

<P><STRONG><a name="[170]"></a>GATTServApp_ProcessCCCWriteReq</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_ProcessCCCWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteCharCfg
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_WriteAttrCB
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_WriteAttrCB
</UL>

<P><STRONG><a name="[51]"></a>GATTServApp_ProcessEvent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = GATTServApp_ProcessEvent &rArr; gattServApp_ProcessMsg &rArr; gattServApp_ProcessWriteReq &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_bleuart.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>GATTServApp_ReadAttr</STRONG> (Thumb, 534 bytes, Stack size 64 bytes, gattservapp.o(i.GATTServApp_ReadAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GATTServApp_ReadAttr &rArr; GATT_FindNextAttr &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[171]"></a>GATTServApp_ReadCharCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_ReadCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>

<P><STRONG><a name="[12d]"></a>GATTServApp_RegisterForMsg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gattservapp.o(i.GATTServApp_RegisterForMsg))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Register
</UL>

<P><STRONG><a name="[75]"></a>GATTServApp_RegisterService</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gattservapp.o(i.GATTServApp_RegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_AddService
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_AddService
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_AddService
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_AddService (via Veneer)
</UL>

<P><STRONG><a name="[17c]"></a>GATTServApp_RegisterService_simple</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, gattservapp_simple_chsys_1.o(i.GATTServApp_RegisterService_simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GATTServApp_RegisterService_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>

<P><STRONG><a name="[173]"></a>GATTServApp_SendCCCUpdatedEvent</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_SendCCCUpdatedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>

<P><STRONG><a name="[127]"></a>GATTServApp_SendServiceChangedInd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_SendServiceChangedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[126]"></a>GATTServApp_UpdateCharCfg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_UpdateCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = GATTServApp_UpdateCharCfg &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[17f]"></a>GATTServApp_WriteAttr</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, gattservapp.o(i.GATTServApp_WriteAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_simple_WriteAttrCB
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_UpdateCharCfg
</UL>

<P><STRONG><a name="[172]"></a>GATTServApp_WriteCharCfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_WriteCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATTServApp_WriteCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>

<P><STRONG><a name="[180]"></a>GATTServApp_simple_WriteAttrCB</STRONG> (Thumb, 134 bytes, Stack size 264 bytes, gattservapp_simple_chsys_1.o(i.GATTServApp_simple_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_check_lenze_app_data
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
</UL>

<P><STRONG><a name="[182]"></a>GATT_AppCompletedMsg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gatt_task.o(i.GATT_AppCompletedMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_AppCompletedMsg &rArr; L2CAP_HostNumCompletedPkts
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[178]"></a>GATT_FindHandle</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, gatt_server.o(i.GATT_FindHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GATT_FindHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteReq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadReq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadMultiReq
</UL>

<P><STRONG><a name="[184]"></a>GATT_FindHandleUUID</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gatt_server.o(i.GATT_FindHandleUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByTypeReq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpTypeReq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[179]"></a>GATT_FindNextAttr</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gatt_server.o(i.GATT_FindNextAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GATT_FindNextAttr &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServiceLastHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>

<P><STRONG><a name="[186]"></a>GATT_Indication</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, gatt_server.o(i.GATT_Indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueInd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStartTimer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
</UL>

<P><STRONG><a name="[18a]"></a>GATT_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gatt_task.o(i.GATT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_Init &rArr; GATT_InitServer
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_InitMtuSize
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[18b]"></a>GATT_InitServer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gatt_server.o(i.GATT_InitServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATT_InitServer
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattRegisterServer
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
</UL>

<P><STRONG><a name="[18e]"></a>GATT_Notification</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gatt_server.o(i.GATT_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueNoti
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Notify
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_check_lenze_app_data
</UL>

<P><STRONG><a name="[4e]"></a>GATT_ProcessEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gatt_task.o(i.GATT_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GATT_ProcessEvent &rArr; gattProcessRxData &rArr; ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_bleuart.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>GATT_RegisterForReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_server.o(i.GATT_RegisterForReq))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>

<P><STRONG><a name="[17b]"></a>GATT_RegisterService</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gatt_server.o(i.GATT_RegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>

<P><STRONG><a name="[17e]"></a>GATT_ServiceChangedInd</STRONG> (Thumb, 70 bytes, Stack size 264 bytes, gatt_server.o(i.GATT_ServiceChangedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
</UL>

<P><STRONG><a name="[1e9]"></a>GATT_ServiceNumAttrs</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gatt_server.o(i.GATT_ServiceNumAttrs))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServiceLastHandle
</UL>

<P><STRONG><a name="[190]"></a>GATT_VerifyReadPermissions</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gatt_server.o(i.GATT_VerifyReadPermissions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_VerifyReadPermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadReq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadMultiReq
</UL>

<P><STRONG><a name="[191]"></a>GATT_VerifyWritePermissions</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gatt_server.o(i.GATT_VerifyWritePermissions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_VerifyWritePermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteReq
</UL>

<P><STRONG><a name="[192]"></a>GGS_AddService</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gapgattserver.o(i.GGS_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GGS_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init
</UL>

<P><STRONG><a name="[193]"></a>GGS_SetParameter</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gapgattserver.o(i.GGS_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GGS_SetParameter &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_SetAttrWPermit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init
</UL>

<P><STRONG><a name="[34]"></a>L2CAP_BuildCmdReject</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, l2cap_util.o(i.L2CAP_BuildCmdReject))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_if.o(i.L2CAP_CmdReject)
</UL>
<P><STRONG><a name="[195]"></a>L2CAP_CmdReject</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, l2cap_if.o(i.L2CAP_CmdReject))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[197]"></a>L2CAP_ConnParamUpdateReq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, l2cap_if.o(i.L2CAP_ConnParamUpdateReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
</UL>

<P><STRONG><a name="[199]"></a>L2CAP_Fragment_bm_alloc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, l2cap_util.o(i.L2CAP_Fragment_bm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TX_bm_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff
</UL>

<P><STRONG><a name="[183]"></a>L2CAP_HostNumCompletedPkts</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, l2cap_if.o(i.L2CAP_HostNumCompletedPkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2CAP_HostNumCompletedPkts
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_HostNumCompletedPktCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_AppCompletedMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
</UL>

<P><STRONG><a name="[19c]"></a>L2CAP_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, l2cap_task.o(i.L2CAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = L2CAP_Init &rArr; l2capSarBufReset
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_L2CAPTaskRegister (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSarBufReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[1fd]"></a>L2CAP_ParseParamUpdateReq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, l2cap_util.o(i.L2CAP_ParseParamUpdateReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[4c]"></a>L2CAP_ProcessEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, l2cap_task.o(i.L2CAP_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = L2CAP_ProcessEvent &rArr; l2capProcessRxData &rArr; l2capProcessSignal &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_bleuart.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>L2CAP_ReassemblePkt_Reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, l2cap_util.o(i.L2CAP_ReassemblePkt_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2CAP_ReassemblePkt_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[150]"></a>L2CAP_RegisterApp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, l2cap_if.o(i.L2CAP_RegisterApp))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[1a2]"></a>L2CAP_SegmentPkt_Reset</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, l2cap_util.o(i.L2CAP_SegmentPkt_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2CAP_SegmentPkt_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[1a3]"></a>L2CAP_SendData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, l2cap_if.o(i.L2CAP_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>

<P><STRONG><a name="[1a6]"></a>L2CAP_bm_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, l2cap_util.o(i.L2CAP_bm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2CAP_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_bm_alloc (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_adjust_header (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>

<P><STRONG><a name="[15e]"></a>SM_CalcRandomAddr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sm_mgr.o(i.SM_CalcRandomAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SM_CalcRandomAddr &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[1aa]"></a>SM_GenerateAuthenSig</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, sm_mgr.o(i.SM_GenerateAuthenSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIncSignCounter
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSignCounter
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSRK
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>

<P><STRONG><a name="[1b0]"></a>SM_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sm_task.o(i.SM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SMPTaskRegister (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[157]"></a>SM_PasskeyUpdate</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sm_pairing.o(i.SM_PasskeyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
</UL>

<P><STRONG><a name="[4f]"></a>SM_ProcessEvent</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sm_task.o(i.SM_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = SM_ProcessEvent &rArr; smProcessOSALMsg &rArr; smProcessDataMsg &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTimedOut
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smNextPairingState
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessOSALMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_bleuart.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>SM_ResolveRandomAddrs</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sm_mgr.o(i.SM_ResolveRandomAddrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SM_ResolveRandomAddrs &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ResolvePrivateAddr
</UL>

<P><STRONG><a name="[14b]"></a>SM_ResponderInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sm_rsppairing.o(i.SM_ResponderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SM_ResponderInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smRegisterResponder
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[ff]"></a>SM_VerifyAuthenSig</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, sm_mgr.o(i.SM_VerifyAuthenSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SM_VerifyAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePacket
</UL>

<P><STRONG><a name="[f6]"></a>attSendMsg</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, att_util.o(i.attSendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteRsp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadRsp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadMultiRsp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeRsp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeRsp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobRsp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteRsp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueRsp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteRsp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueNoti
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueInd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoRsp
</UL>

<P><STRONG><a name="[1b9]"></a>bleuart_AddService</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bleuart_service.o(i.bleuart_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bleuart_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init
</UL>

<P><STRONG><a name="[1ba]"></a>bleuart_Init</STRONG> (Thumb, 902 bytes, Stack size 72 bytes, bleuart.o(i.bleuart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bleuart_Init &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_AddService
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_AddService
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_AddService
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_AddService (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[11c]"></a>bleuart_Notify</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bleuart_service.o(i.bleuart_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = bleuart_Notify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_uart_to_BLE_send
</UL>

<P><STRONG><a name="[11b]"></a>bleuart_NotifyIsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bleuart_service.o(i.bleuart_NotifyIsReady))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_uart_to_BLE_send
</UL>

<P><STRONG><a name="[52]"></a>bleuart_ProcessEvent</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, bleuart.o(i.bleuart_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = bleuart_ProcessEvent &rArr; BUP_data_uart_to_BLE_send &rArr; bleuart_Notify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_StartDevice
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Register
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_uart_to_BLE_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_uart_to_BLE
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_BLE_to_uart_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_BLE_to_uart_completed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_setdata
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_bleuart.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>bleuart_conn_interval</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bleuart.o(i.bleuart_conn_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bleuart_conn_interval &rArr; GAPRole_GetParameter &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_uart_to_BLE_send
</UL>

<P><STRONG><a name="[1d3]"></a>gapAddAddrAdj</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapAddAddrAdj))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
</UL>

<P><STRONG><a name="[1c9]"></a>gapDetermineAddrType</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapDetermineAddrType))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[1bc]"></a>gapFindADType</STRONG> (Thumb, 72 bytes, Stack size 36 bytes, gap_devmgr.o(i.gapFindADType))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapValidADType
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLimitedDiscoverableMode
</UL>

<P><STRONG><a name="[1bf]"></a>gapFreeEstLink</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_linkmgr.o(i.gapFreeEstLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapFreeEstLink
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[228]"></a>gapGetDevAddress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
</UL>

<P><STRONG><a name="[227]"></a>gapGetDevAddressMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetDevAddressMode))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
</UL>

<P><STRONG><a name="[15d]"></a>gapGetIRK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetIRK))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
</UL>

<P><STRONG><a name="[1ad]"></a>gapGetSRK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetSRK))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
</UL>

<P><STRONG><a name="[1ab]"></a>gapGetSignCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetSignCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[1af]"></a>gapIncSignCounter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gap_configmgr.o(i.gapIncSignCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapIncSignCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[15c]"></a>gapIsAdvertising</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gap_devmgr.o(i.gapIsAdvertising))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[1c0]"></a>gapPairingCompleteCB</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, gap_linkmgr.o(i.gapPairingCompleteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memdup (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>

<P><STRONG><a name="[1c2]"></a>gapPasskeyNeededCB</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gap_linkmgr.o(i.gapPasskeyNeededCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapPasskeyNeededCB
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
</UL>

<P><STRONG><a name="[1c6]"></a>gapProcessConnUpdateCompleteEvt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_linkmgr.o(i.gapProcessConnUpdateCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessConnUpdateCompleteEvt &rArr; gapSendLinkUpdateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[1c8]"></a>gapProcessConnectionCompleteEvt</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, gap_linkmgr.o(i.gapProcessConnectionCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapProcessConnectionCompleteEvt &rArr; linkDB_Add &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapDetermineAddrType
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SegmentPkt_Reset
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[1cd]"></a>gapProcessDisconnectCompleteEvt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gap_linkmgr.o(i.gapProcessDisconnectCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessDisconnectCompleteEvt &rArr; linkDB_Remove &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SegmentPkt_Reset
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[15f]"></a>gapProcessNewAddr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_configmgr.o(i.gapProcessNewAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapProcessNewAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetRandomAddressCmd (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAddAddrAdj
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[1d0]"></a>gapProcessRandomAddrComplete</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gap_configmgr.o(i.gapProcessRandomAddrComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapProcessRandomAddrComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[1d2]"></a>gapReadBD_ADDRStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gap_configmgr.o(i.gapReadBD_ADDRStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapReadBD_ADDRStatus &rArr; gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadBufSizeCmd (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[1d1]"></a>gapReadBufSizeCmdStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gap_configmgr.o(i.gapReadBufSizeCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapReadBufSizeCmdStatus &rArr; gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[158]"></a>gapRegisterPeripheral</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_task.o(i.gapRegisterPeripheral))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
</UL>

<P><STRONG><a name="[1d8]"></a>gapSendBondCompleteEvent</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gap_linkmgr.o(i.gapSendBondCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapSendBondCompleteEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
</UL>

<P><STRONG><a name="[1c7]"></a>gapSendLinkUpdateEvent</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, gap_linkmgr.o(i.gapSendLinkUpdateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapSendLinkUpdateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnUpdateCompleteEvt
</UL>

<P><STRONG><a name="[1da]"></a>gapSendPairingReqEvent</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, gap_linkmgr.o(i.gapSendPairingReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapSendPairingReqEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[5]"></a>gapSetAdvParams</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, gap_peridevmgr.o(i.gapSetAdvParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvParamCmd (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAddAddrAdj
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLimitedDiscoverableMode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peridevmgr.o(.data)
</UL>
<P><STRONG><a name="[1c3]"></a>gapSetAdvParamsStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.gapSetAdvParamsStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapSetAdvParamsStatus &rArr; gapSendMakeDiscEvent &rArr; gapFreeAdvertState
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvEnableCmd (via Veneer)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[1b8]"></a>gapUpdateConnSignCounter</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gap_configmgr.o(i.gapUpdateConnSignCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapUpdateConnSignCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
</UL>

<P><STRONG><a name="[1bd]"></a>gapValidADType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gap_devmgr.o(i.gapValidADType))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
</UL>

<P><STRONG><a name="[1c5]"></a>gapWriteAdvDataStatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapWriteAdvDataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapWriteAdvDataStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[1c4]"></a>gapWriteAdvEnableStatus</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, gap_peridevmgr.o(i.gapWriteAdvEnableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gapWriteAdvEnableStatus &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLimitedDiscoverableMode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[1de]"></a>gattNotifyEvent</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, gatt_task.o(i.gattNotifyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleTimerCB
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
</UL>

<P><STRONG><a name="[18d]"></a>gattRegisterServer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_task.o(i.gattRegisterServer))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
</UL>

<P><STRONG><a name="[189]"></a>gattStartTimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_task.o(i.gattStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[1e0]"></a>gattStopTimer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatt_task.o(i.gattStopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
</UL>

<P><STRONG><a name="[1ff]"></a>l2capAllocChannel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, l2cap_util.o(i.l2capAllocChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2capAllocChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>

<P><STRONG><a name="[35]"></a>l2capBuildParamUpdateReq</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capBuildParamUpdateReq))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_if.o(i.L2CAP_ConnParamUpdateReq)
</UL>
<P><STRONG><a name="[1a5]"></a>l2capEncapSendData</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capEncapSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_adjust_header (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSegmentBuffToLinkLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>

<P><STRONG><a name="[1f6]"></a>l2capFindLocalId</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, l2cap_util.o(i.l2capFindLocalId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2capFindLocalId
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[1fa]"></a>l2capFreeChannel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capFreeChannel))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>

<P><STRONG><a name="[1fe]"></a>l2capHandleRxError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capHandleRxError))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[1f2]"></a>l2capNotifyData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capNotifyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2capNotifyData
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[1f1]"></a>l2capNotifySignal</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, l2cap_util.o(i.l2capNotifySignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2capNotifySignal
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleTimerCB
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[1f7]"></a>l2capParseCmdReject</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capParseCmdReject))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[1f3]"></a>l2capParsePacket</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capParsePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2capParsePacket &rArr; L2CAP_ReassemblePkt_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_adjust_header (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[1f8]"></a>l2capParseParamUpdateRsp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capParseParamUpdateRsp))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[1fc]"></a>l2capParseSignalHdr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capParseSignalHdr))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[1f0]"></a>l2capPktToSegmentBuff</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, l2cap_util.o(i.l2capPktToSegmentBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetCurrentMTUSize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_bm_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_SendDataPkt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>

<P><STRONG><a name="[19e]"></a>l2capSarBufReset</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capSarBufReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2capSarBufReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
</UL>

<P><STRONG><a name="[196]"></a>l2capSendCmd</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, l2cap_util.o(i.l2capSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
</UL>

<P><STRONG><a name="[198]"></a>l2capSendReq</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, l2cap_util.o(i.l2capSendReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capAllocChannel
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq
</UL>

<P><STRONG><a name="[1f9]"></a>l2capStopTimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, l2cap_util.o(i.l2capStopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2capStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[1cb]"></a>linkDB_Add</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, linkdb.o(i.linkDB_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = linkDB_Add &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportStatusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[188]"></a>linkDB_Authen</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, linkdb.o(i.linkDB_Authen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyWritePermissions
</UL>

<P><STRONG><a name="[144]"></a>linkDB_Find</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_Find))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpProcessIncoming
</UL>

<P><STRONG><a name="[1bb]"></a>linkDB_FindFirst</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, linkdb.o(i.linkDB_FindFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = linkDB_FindFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>

<P><STRONG><a name="[14e]"></a>linkDB_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linkDB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[155]"></a>linkDB_NumActive</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_NumActive))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
</UL>

<P><STRONG><a name="[16e]"></a>linkDB_Register</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_Register))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_AddService
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
</UL>

<P><STRONG><a name="[1ce]"></a>linkDB_Remove</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = linkDB_Remove &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportStatusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
</UL>

<P><STRONG><a name="[1a4]"></a>linkDB_State</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linkDB_State
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_HandleConnStatusCB
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
</UL>

<P><STRONG><a name="[2e]"></a>on_BUP_Evt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bleuart.o(i.on_BUP_Evt))
<BR>[Address Reference Count : 2]<UL><LI> bleuart.o(i.bleuart_Init)
<LI> bleuart_protocol.o(i.AT_setdata)
</UL>
<P><STRONG><a name="[38]"></a>on_bleuartServiceEvt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bleuart.o(i.on_bleuartServiceEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_bleuartServiceEvt &rArr; BUP_data_BLE_to_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_disconnect_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_BLE_to_uart
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_connect_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bleuart.o(i.bleuart_Init)
</UL>
<P><STRONG><a name="[1e]"></a>osalInitTasks</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, osal_bleuart.o(i.osalInitTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = osalInitTasks &rArr; bleuart_Init &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init (via Veneer)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[10f]"></a>osal_snv_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, osal_snv.o(i.osal_snv_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_read (via Veneer)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_StateNotificationCB
</UL>

<P><STRONG><a name="[10b]"></a>osal_snv_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, osal_snv.o(i.osal_snv_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write (via Veneer)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_get_garbage_size (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_get_free_size (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect (via Veneer)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_setdata
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init
</UL>

<P><STRONG><a name="[1ca]"></a>sendEstLinkEvent</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gap_linkmgr.o(i.sendEstLinkEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sendEstLinkEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[22d]"></a>smAuthReqToUint8</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sm_mgr.o(i.smAuthReqToUint8))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildSecurityReq
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>

<P><STRONG><a name="[224]"></a>smDetermineKeySize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sm_pairing.o(i.smDetermineKeySize))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessEncryptionInformation
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
</UL>

<P><STRONG><a name="[207]"></a>smEndPairing</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, sm_pairing.o(i.smEndPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTimedOut
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smNextPairingState
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessSigningInfo
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessMasterID
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
</UL>

<P><STRONG><a name="[1b3]"></a>smGenerateConfirm</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sm_pairing.o(i.smGenerateConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = smGenerateConfirm &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingConfirm
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
</UL>

<P><STRONG><a name="[20a]"></a>smGeneratePairingReqRsp</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sm_pairing.o(i.smGeneratePairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
</UL>

<P><STRONG><a name="[161]"></a>smGenerateRandBuf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sm_mgr.o(i.smGenerateRandBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smGenerateRandBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_rand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SecParamsInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
</UL>

<P><STRONG><a name="[20d]"></a>smGenerateRandMsg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sm_pairing.o(i.smGenerateRandMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = smGenerateRandMsg &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[36]"></a>smLinkCheck</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sm_pairing.o(i.smLinkCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smLinkCheck &rArr; smFreePairingParams &rArr; smStopRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_task.o(i.SM_Init)
</UL>
<P><STRONG><a name="[1b6]"></a>smNextPairingState</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sm_pairing.o(i.smNextPairingState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smNextPairingState &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
</UL>

<P><STRONG><a name="[20e]"></a>smPairingSendEncInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm_pairing.o(i.smPairingSendEncInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = smPairingSendEncInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
</UL>

<P><STRONG><a name="[20f]"></a>smPairingSendIdentityAddrInfo</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sm_pairing.o(i.smPairingSendIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = smPairingSendIdentityAddrInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
</UL>

<P><STRONG><a name="[210]"></a>smPairingSendIdentityInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm_pairing.o(i.smPairingSendIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = smPairingSendIdentityInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
</UL>

<P><STRONG><a name="[211]"></a>smPairingSendMasterID</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sm_pairing.o(i.smPairingSendMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
</UL>

<P><STRONG><a name="[212]"></a>smPairingSendSingingInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm_pairing.o(i.smPairingSendSingingInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = smPairingSendSingingInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
</UL>

<P><STRONG><a name="[213]"></a>smProcessDataMsg</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, sm_pairing.o(i.smProcessDataMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = smProcessDataMsg &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSigningInfo
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSecurityReq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingReq
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingRandom
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingFailed
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingConfirm
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseMasterID
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityInfo
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityAddrInfo
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseEncInfo
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpProcessIncoming
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessOSALMsg
</UL>

<P><STRONG><a name="[220]"></a>smProcessEncryptChange</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sm_pairing.o(i.smProcessEncryptChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = smProcessEncryptChange &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessOSALMsg
</UL>

<P><STRONG><a name="[221]"></a>smProcessRandComplete</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sm_mgr.o(i.smProcessRandComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smProcessRandComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RandCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessOSALMsg
</UL>

<P><STRONG><a name="[1b7]"></a>smRegisterResponder</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sm_pairing.o(i.smRegisterResponder))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResponderInit
</UL>

<P><STRONG><a name="[229]"></a>smSavePairInfo</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, sm_pairing.o(i.smSavePairInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smSavePairInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
</UL>

<P><STRONG><a name="[164]"></a>smSendFailAndEnd</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sm_pairing.o(i.smSendFailAndEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[163]"></a>smSendSMMsg</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, smp.o(i.smSendSMMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendSingingInfo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityInfo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendEncInfo
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
</UL>

<P><STRONG><a name="[147]"></a>smStartEncryption</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sm_pairing.o(i.smStartEncryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smStartEncryption
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
</UL>

<P><STRONG><a name="[21f]"></a>smStartRspTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sm_mgr.o(i.smStartRspTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smStartRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>

<P><STRONG><a name="[209]"></a>smStopRspTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm_mgr.o(i.smStopRspTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smStopRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>

<P><STRONG><a name="[1b5]"></a>smTimedOut</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sm_pairing.o(i.smTimedOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smTimedOut &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
</UL>

<P><STRONG><a name="[162]"></a>smUint8ToAuthReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sm_mgr.o(i.smUint8ToAuthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSecurityReq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingReq
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
</UL>

<P><STRONG><a name="[1a9]"></a>sm_ah</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, sm_mgr.o(i.sm_ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
</UL>

<P><STRONG><a name="[1b2]"></a>sm_c1</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, sm_pairing.o(i.sm_c1))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddressMode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddress
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingRsp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReq
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingConfirm
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
</UL>

<P><STRONG><a name="[22a]"></a>sm_c1new</STRONG> (Thumb, 194 bytes, Stack size 120 bytes, sm_mgr.o(i.sm_c1new))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_xor
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
</UL>

<P><STRONG><a name="[223]"></a>sm_s1</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, sm_mgr.o(i.sm_s1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sm_s1 &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
</UL>

<P><STRONG><a name="[3e]"></a>smpBuildEncInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpBuildEncInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildEncInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smPairingSendEncInfo)
</UL>
<P><STRONG><a name="[3f]"></a>smpBuildIdentityAddrInfo</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, smp.o(i.smpBuildIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildIdentityAddrInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smPairingSendIdentityAddrInfo)
</UL>
<P><STRONG><a name="[40]"></a>smpBuildIdentityInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpBuildIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildIdentityInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smPairingSendIdentityInfo)
</UL>
<P><STRONG><a name="[41]"></a>smpBuildMasterID</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, smp.o(i.smpBuildMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildMasterID
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smPairingSendMasterID)
</UL>
<P><STRONG><a name="[3a]"></a>smpBuildPairingConfirm</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpBuildPairingConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildPairingConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smGenerateConfirm)
</UL>
<P><STRONG><a name="[43]"></a>smpBuildPairingFailed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, smp.o(i.smpBuildPairingFailed))
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smSendFailAndEnd)
</UL>
<P><STRONG><a name="[3d]"></a>smpBuildPairingRandom</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpBuildPairingRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildPairingRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smGenerateRandMsg)
</UL>
<P><STRONG><a name="[3b]"></a>smpBuildPairingReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, smp.o(i.smpBuildPairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpBuildPairingReq &rArr; smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smGeneratePairingReqRsp)
</UL>
<P><STRONG><a name="[22c]"></a>smpBuildPairingReqRsp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, smp.o(i.smpBuildPairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smAuthReqToUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingRsp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReq
</UL>

<P><STRONG><a name="[3c]"></a>smpBuildPairingRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, smp.o(i.smpBuildPairingRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpBuildPairingRsp &rArr; smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smGeneratePairingReqRsp)
</UL>
<P><STRONG><a name="[2f]"></a>smpBuildSecurityReq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpBuildSecurityReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildSecurityReq
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smAuthReqToUint8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_perilinkmgr.o(i.GAP_SendSlaveSecurityRequest)
</UL>
<P><STRONG><a name="[42]"></a>smpBuildSigningInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpBuildSigningInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildSigningInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smPairingSendSingingInfo)
</UL>
<P><STRONG><a name="[218]"></a>smpParseEncInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpParseEncInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseEncInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[21b]"></a>smpParseIdentityAddrInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpParseIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseIdentityAddrInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[21a]"></a>smpParseIdentityInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpParseIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseIdentityInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[219]"></a>smpParseMasterID</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, smp.o(i.smpParseMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseMasterID
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[215]"></a>smpParsePairingConfirm</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpParsePairingConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParsePairingConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[217]"></a>smpParsePairingFailed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, smp.o(i.smpParsePairingFailed))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[216]"></a>smpParsePairingRandom</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpParsePairingRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParsePairingRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[214]"></a>smpParsePairingReq</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, smp.o(i.smpParsePairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpParsePairingReq &rArr; smUint8ToAuthReq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[21d]"></a>smpParseSecurityReq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, smp.o(i.smpParseSecurityReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpParseSecurityReq &rArr; smUint8ToAuthReq
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[21c]"></a>smpParseSigningInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpParseSigningInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseSigningInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[22f]"></a>smpResponderProcessPairingReq</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, sm_rsppairing.o(i.smpResponderProcessPairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = smpResponderProcessPairingReq &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[47]"></a>uart_evt_hdl</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bleuart_protocol.o(i.uart_evt_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_evt_hdl &rArr; uartrx_timeout_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartrx_timeout_timer_stop
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartrx_timeout_timer_start
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bleuart_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[235]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[69]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[70]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[236]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[237]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[238]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[239]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[23a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[23b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_search_items
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PasscodeRsp (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_check_lenze_app_data (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[23c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_get_free_size
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_evt_hdl (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Response2 (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Response (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_uart_to_BLE_send (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_uart_to_BLE (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_BLE_to_uart (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_setdata (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query (via Veneer)
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unregister
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query (via Veneer)
</UL>

<P><STRONG><a name="[23d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[23e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_init (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_disconnect_handler (via Veneer)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_connect_handler (via Veneer)
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Response2 (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Response (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_uart_to_BLE_send (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query (via Veneer)
</UL>

<P><STRONG><a name="[240]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[241]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>init_config</STRONG> (Thumb, 514 bytes, Stack size 24 bytes, patch.o(_section_xip_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_config
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSleepMode (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>DevInfo_AddService</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, devinfoservice.o(i.DevInfo_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DevInfo_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init (via Veneer)
</UL>

<P><STRONG><a name="[76]"></a>DevInfo_SetParameter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, devinfoservice.o(i.DevInfo_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevInfo_SetParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_StateNotificationCB (via Veneer)
</UL>

<P><STRONG><a name="[11]"></a>LL_ENC_AES128_Encrypt1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, patch.o(i.LL_ENC_AES128_Encrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ENC_AES128_Encrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[13]"></a>LL_ENC_Decrypt1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, patch.o(i.LL_ENC_Decrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ENC_Decrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[12]"></a>LL_ENC_Encrypt1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, patch.o(i.LL_ENC_Encrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ENC_Encrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[e]"></a>LL_IRQHandler1</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, patch.o(i.LL_IRQHandler1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IRQHandler1
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processPrdScanIRQ (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processPrdAdvIRQ (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtScanIRQ (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtInitIRQ (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ (via Veneer)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_irq_status (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_clr_irq (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecInit (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecAdvEvt (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSecAdvAllow (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[14]"></a>LL_SetAdvParam1</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, patch.o(i.LL_SetAdvParam1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_SetAdvParam1
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[b]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>WaitMs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, clock.o(i.WaitMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WaitMs
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_counter (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_setdata (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[e9]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, central.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_StateNotificationCB (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_check_lenze_app_data (via Veneer)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg (via Veneer)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming (via Veneer)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo (via Veneer)
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt (via Veneer)
</UL>

<P><STRONG><a name="[9d]"></a>__psr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, patch.o(i.__psr))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_read
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
</UL>

<P><STRONG><a name="[244]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[245]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[246]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[8c]"></a>_efuse_chip_version_check</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, phy_sec_ext.o(i._efuse_chip_version_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _efuse_chip_version_check
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sec_boot_init
</UL>

<P><STRONG><a name="[8e]"></a>_rom_sec_boot_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phy_sec_ext.o(i._rom_sec_boot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _rom_sec_boot_init &rArr; _efuse_chip_version_check
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_boot_init
</UL>

<P><STRONG><a name="[93]"></a>app_main</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bleuart_main.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_main
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_device (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query (via Veneer)
</UL>

<P><STRONG><a name="[66]"></a>hal_GPIO_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.hal_GPIO_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_GPIO_IRQHandler &rArr; hal_gpioin_event &rArr; hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
</UL>

<P><STRONG><a name="[67]"></a>hal_TIMER5_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.hal_TIMER5_IRQHandler), UNUSED, KEPT)

<P><STRONG><a name="[68]"></a>hal_TIMER6_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.hal_TIMER6_IRQHandler), UNUSED, KEPT)

<P><STRONG><a name="[1c]"></a>hal_UART0_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart.o(i.hal_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_UART0_IRQHandler &rArr; irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_rx_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart.o(i.uart_hw_init)
<LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[1b]"></a>hal_UART1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart.o(i.hal_UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_UART1_IRQHandler &rArr; irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_rx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.uart_hw_init)
</UL>
<P><STRONG><a name="[ed]"></a>hal_clk_gate_disable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clock.o(i.hal_clk_gate_disable))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
</UL>

<P><STRONG><a name="[dd]"></a>hal_clk_gate_enable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clock.o(i.hal_clk_gate_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
</UL>

<P><STRONG><a name="[ec]"></a>hal_clk_reset</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, clock.o(i.hal_clk_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_clk_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
</UL>

<P><STRONG><a name="[a5]"></a>hal_flash_erase_sector</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, flash.o(i.hal_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_flash_erase_sector &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_erase_sector (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
</UL>

<P><STRONG><a name="[9c]"></a>hal_flash_read</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, flash.o(i.hal_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query (via Veneer)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Init (via Veneer)
</UL>

<P><STRONG><a name="[9e]"></a>hal_flash_write</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, flash.o(i.hal_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_write (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write
</UL>

<P><STRONG><a name="[a8]"></a>hal_fs_garbage_collect</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, fs.o(i.hal_fs_garbage_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_addr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write (via Veneer)
</UL>

<P><STRONG><a name="[aa]"></a>hal_fs_get_free_size</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fs.o(i.hal_fs_get_free_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_fs_get_free_size &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write (via Veneer)
</UL>

<P><STRONG><a name="[ab]"></a>hal_fs_get_garbage_size</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs.o(i.hal_fs_get_garbage_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_fs_get_garbage_size &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_search_items
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write (via Veneer)
</UL>

<P><STRONG><a name="[ac]"></a>hal_fs_item_del</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, fs.o(i.hal_fs_item_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hal_fs_item_del &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_find_id
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_addr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
</UL>

<P><STRONG><a name="[ad]"></a>hal_fs_item_find_id</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fs.o(i.hal_fs_item_find_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_search_items
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_read
</UL>

<P><STRONG><a name="[ae]"></a>hal_fs_item_read</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, fs.o(i.hal_fs_item_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_find_id
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read (via Veneer)
</UL>

<P><STRONG><a name="[af]"></a>hal_fs_item_write</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, fs.o(i.hal_fs_item_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hal_fs_item_write &rArr; hal_fs_item_del &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_find_id
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_get_free_size
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write (via Veneer)
</UL>

<P><STRONG><a name="[b0]"></a>hal_gpio_cfg_analog_io</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, gpio.o(i.hal_gpio_cfg_analog_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>

<P><STRONG><a name="[b3]"></a>hal_gpio_fmux</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_fmux))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
</UL>

<P><STRONG><a name="[b2]"></a>hal_gpio_fmux_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_fmux_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</UL>

<P><STRONG><a name="[b4]"></a>hal_gpio_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_gpio_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[b9]"></a>hal_gpio_pin2pin3_control</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_pin2pin3_control))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[b8]"></a>hal_gpio_pin_init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, gpio.o(i.hal_gpio_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin2pin3_control
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_cfg_analog_io
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_init (via Veneer)
</UL>

<P><STRONG><a name="[b1]"></a>hal_gpio_pull_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_pull_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_cfg_analog_io
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[bb]"></a>hal_gpio_read</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_read))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[bc]"></a>hal_gpio_wakeup_set</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gpio.o(i.hal_gpio_wakeup_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_gpio_wakeup_set &rArr; hal_gpio_wakeup_control
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_control
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[bd]"></a>hal_gpio_write</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gpio.o(i.hal_gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_gpio_write &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_init (via Veneer)
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_StateNotificationCB (via Veneer)
</UL>

<P><STRONG><a name="[be]"></a>hal_gpioin_enable</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gpio.o(i.hal_gpioin_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[c6]"></a>hal_pwrmgr_LowCurrentLdo_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_LowCurrentLdo_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[c4]"></a>hal_pwrmgr_RAM_retention</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[c5]"></a>hal_pwrmgr_RAM_retention_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention_set))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_sleep_process
</UL>

<P><STRONG><a name="[c9]"></a>hal_pwrmgr_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pwrmgr.o(i.hal_pwrmgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[cc]"></a>hal_pwrmgr_lock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
</UL>

<P><STRONG><a name="[b7]"></a>hal_pwrmgr_register</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, pwrmgr.o(i.hal_pwrmgr_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_pwrmgr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_init (via Veneer)
</UL>

<P><STRONG><a name="[1f]"></a>hal_pwrmgr_sleep_process</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_sleep_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_sleep_process
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[cd]"></a>hal_pwrmgr_unlock</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
</UL>

<P><STRONG><a name="[ce]"></a>hal_pwrmgr_unregister</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_unregister
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[20]"></a>hal_pwrmgr_wakeup_process</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_wakeup_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_wakeup_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[d0]"></a>hal_rom_boot_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, patch.o(i.hal_rom_boot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_rom_boot_init &rArr; _rom_sec_boot_init &rArr; _efuse_chip_version_check
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sec_boot_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[c8]"></a>hal_rtc_clock_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, clock.o(i.hal_rtc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_rtc_clock_config &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[ca]"></a>hal_spif_cache_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash.o(i.hal_spif_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_spif_cache_init &rArr; hw_spif_cache_config &rArr; hal_cache_tag_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[d4]"></a>hal_uart_deinit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(i.hal_uart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_uart_deinit &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unregister
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_setdata (via Veneer)
</UL>

<P><STRONG><a name="[d6]"></a>hal_uart_init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hal_uart_init &rArr; uart_hw_init &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_init (via Veneer)
</UL>

<P><STRONG><a name="[d8]"></a>hal_uart_send_buff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.hal_uart_send_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Response2 (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Response (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_BLE_to_uart_send (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[db]"></a>hal_uart_set_tx_buf</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(i.hal_uart_set_tx_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_set_tx_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_init (via Veneer)
</UL>

<P><STRONG><a name="[d]"></a>ll_hw_go1</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, patch.o(i.ll_hw_go1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_hw_go1
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[a]"></a>main</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main &rArr; hal_init &rArr; hal_spif_cache_init &rArr; hw_spif_cache_config &rArr; hal_cache_tag_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_init (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10a]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query (via Veneer)
</UL>

<P><STRONG><a name="[e1]"></a>rc32k_calibration</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rc32k_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rc32k_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[f]"></a>rf_calibrate1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_calibrate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rf_calibrate1 &rArr; rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[e2]"></a>rf_phy_ana_cfg</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, rf_phy_driver.o(i.rf_phy_ana_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_phy_ana_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[e5]"></a>rf_phy_bb_cfg</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_phy_bb_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_phy_bb_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_crc_fmt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[10]"></a>rf_phy_change_cfg0</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, rf_phy_driver.o(i.rf_phy_change_cfg0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_phy_change_cfg0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[21]"></a>rf_phy_ini</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_phy_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_phy_ini &rArr; rf_phy_bb_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_set_txPower
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_tx2rx_timing_config (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[e7]"></a>rf_phy_set_txPower</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, rf_phy_driver.o(i.rf_phy_set_txPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_phy_set_txPower
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[e4]"></a>rf_rxDcoc_cfg</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_rxDcoc_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_rxDcoc_cfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[e3]"></a>rf_tpCal_gen_cap_arrary</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, rf_phy_driver.o(i.rf_tpCal_gen_cap_arrary))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[ea]"></a>rf_tp_cal</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_tp_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_tp_cal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d1]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[c2]"></a>hal_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, main.o(i.hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_init &rArr; hal_spif_cache_init &rArr; hw_spif_cache_config &rArr; hal_cache_tag_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_LowCurrentLdo_enable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>hal_rfphy_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.hal_rfphy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_rfphy_init &rArr; hal_rom_boot_init &rArr; _rom_sec_boot_init &rArr; _efuse_chip_version_check
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_set_heap (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_boot_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnectContext (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>irq_rx_handler</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, uart.o(i.irq_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = irq_rx_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART1_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>irq_tx_empty_handler</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, uart.o(i.irq_tx_empty_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = irq_tx_empty_handler &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART1_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>txmit_buf_polling</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, uart.o(i.txmit_buf_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[d9]"></a>txmit_buf_use_tx_buf</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, uart.o(i.txmit_buf_use_tx_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[d5]"></a>uart_hw_deinit</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, uart.o(i.uart_hw_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_reset
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[d7]"></a>uart_hw_init</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, uart.o(i.uart_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_hw_init &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_reset
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_pclk (via Veneer)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wakeup_process_1
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wakeup_process_0
</UL>

<P><STRONG><a name="[1a]"></a>uart_wakeup_process_0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_wakeup_process_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_wakeup_process_0 &rArr; uart_hw_init &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.hal_uart_init)
</UL>
<P><STRONG><a name="[19]"></a>uart_wakeup_process_1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_wakeup_process_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_wakeup_process_1 &rArr; uart_hw_init &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.hal_uart_init)
</UL>
<P><STRONG><a name="[b6]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[c1]"></a>hal_gpio_interrupt_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
</UL>

<P><STRONG><a name="[ba]"></a>hal_gpio_retention_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_retention_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_retention_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[17]"></a>hal_gpio_sleep_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_sleep_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_gpio_sleep_handler &rArr; hal_gpio_wakeup_set &rArr; hal_gpio_wakeup_control
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_retention_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpio_init)
</UL>
<P><STRONG><a name="[c0]"></a>hal_gpio_wakeup_control</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_wakeup_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_gpio_wakeup_control
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
</UL>

<P><STRONG><a name="[16]"></a>hal_gpio_wakeup_handler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_gpio_wakeup_handler &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin2pin3_control
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event_pin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_retention_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpio_init)
</UL>
<P><STRONG><a name="[9f]"></a>hal_gpioin_event</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gpio.o(i.hal_gpioin_event), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_gpioin_event &rArr; hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event_pin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_GPIO_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>hal_gpioin_event_pin</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpio.o(i.hal_gpioin_event_pin))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[203]"></a>print_hex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osal_snv.o(i.print_hex))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
</UL>

<P><STRONG><a name="[8f]"></a>_spif_wait_nobusy_x</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, flash.o(i._spif_wait_nobusy_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_rddata (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_cmd (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
</UL>

<P><STRONG><a name="[a2]"></a>hal_cache_tag_flush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, flash.o(i.hal_cache_tag_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_cache_tag_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
</UL>

<P><STRONG><a name="[18]"></a>hw_spif_cache_config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, flash.o(i.hw_spif_cache_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hw_spif_cache_config &rArr; hal_cache_tag_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_config (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.hal_spif_cache_init)
</UL>
<P><STRONG><a name="[a9]"></a>check_addr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs.o(i.check_addr))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_read
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
</UL>

<P><STRONG><a name="[97]"></a>fs_init</STRONG> (Thumb, 324 bytes, Stack size 128 bytes, fs.o(i.fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_search_items
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
</UL>

<P><STRONG><a name="[9b]"></a>fs_search_items</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, fs.o(i.fs_search_items))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_find_id
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_get_garbage_size
</UL>

<P><STRONG><a name="[99]"></a>fs_spif_read</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fs.o(i.fs_spif_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_search_items
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_read
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
</UL>

<P><STRONG><a name="[9a]"></a>fs_spif_write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fs.o(i.fs_spif_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fs_spif_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
</UL>

<P><STRONG><a name="[12e]"></a>gapBondMgrFindAddr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgrFindAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapBondMgrFindAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[130]"></a>gapBondMgrGetPublicAddr</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, gapbondmgr.o(i.gapBondMgrGetPublicAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gapBondMgrGetPublicAddr &rArr; osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[125]"></a>gapBondMgrInvertCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapbondmgr.o(i.gapBondMgrInvertCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[44]"></a>ggs_ReadAttrCB</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, gapgattserver.o(i.ggs_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ggs_ReadAttrCB &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapgattserver.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>ggs_SetAttrWPermit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gapgattserver.o(i.ggs_SetAttrWPermit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ggs_SetAttrWPermit
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
</UL>

<P><STRONG><a name="[45]"></a>ggs_WriteAttrCB</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, gapgattserver.o(i.ggs_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ggs_WriteAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapgattserver.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>gapRole_ProcessGAPMsg</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, peripheral.o(i.gapRole_ProcessGAPMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052<LI>Call Chain = gapRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_UpdateCharCfg &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_get_timeoutEx (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
</UL>

<P><STRONG><a name="[135]"></a>gapRole_ProcessOSALMsg</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, peripheral.o(i.gapRole_ProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = gapRole_ProcessOSALMsg &rArr; gapRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_UpdateCharCfg &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[139]"></a>gapRole_startConnUpdate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, peripheral.o(i.gapRole_startConnUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[176]"></a>gattServApp_FindAuthorizeAttrCB</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gattservapp.o(i.gattServApp_FindAuthorizeAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattServApp_FindAuthorizeAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>

<P><STRONG><a name="[16f]"></a>gattServApp_FindCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteCharCfg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>

<P><STRONG><a name="[1e1]"></a>gattServApp_FindPrepareWriteQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindPrepareWriteQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
</UL>

<P><STRONG><a name="[177]"></a>gattServApp_FindServiceCBs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindServiceCBs))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>

<P><STRONG><a name="[30]"></a>gattServApp_HandleConnStatusCB</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_HandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattServApp_HandleConnStatusCB &rArr; GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(i.GATTServApp_Init)
</UL>
<P><STRONG><a name="[1e2]"></a>gattServApp_ProcessExecuteWriteReq</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessExecuteWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = gattServApp_ProcessExecuteWriteReq &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteRsp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[1e3]"></a>gattServApp_ProcessFindByTypeValueReq</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, gattservapp.o(i.gattServApp_ProcessFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = gattServApp_ProcessFindByTypeValueReq &rArr; ATT_FindByTypeValueRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueRsp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[174]"></a>gattServApp_ProcessMsg</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = gattServApp_ProcessMsg &rArr; gattServApp_ProcessWriteReq &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_AppCompletedMsg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadRsp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobRsp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent
</UL>

<P><STRONG><a name="[1e8]"></a>gattServApp_ProcessPrepareWriteReq</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_ProcessPrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = gattServApp_ProcessPrepareWriteReq &rArr; ATT_PrepareWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteRsp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[1e6]"></a>gattServApp_ProcessReadByGrpTypeReq</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, gattservapp.o(i.gattServApp_ProcessReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gattServApp_ProcessReadByGrpTypeReq &rArr; ATT_ReadByGrpTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeRsp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[1e4]"></a>gattServApp_ProcessReadByTypeReq</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, gattservapp.o(i.gattServApp_ProcessReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gattServApp_ProcessReadByTypeReq &rArr; ATT_ReadByTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeRsp
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[1e5]"></a>gattServApp_ProcessReadMultiReq</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, gattservapp.o(i.gattServApp_ProcessReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = gattServApp_ProcessReadMultiReq &rArr; ATT_ReadMultiRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadMultiRsp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[1e7]"></a>gattServApp_ProcessWriteReq</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = gattServApp_ProcessWriteReq &rArr; GATTServApp_WriteAttr &rArr; GATTServApp_simple_WriteAttrCB &rArr; ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteRsp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[16c]"></a>gattServApp_SetNumPrepareWrites</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_SetNumPrepareWrites))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattServApp_SetNumPrepareWrites
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>

<P><STRONG><a name="[46]"></a>gattServApp_WriteAttrCB</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattServApp_WriteAttrCB &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>devInfo_ReadAttrCB</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, devinfoservice.o(i.devInfo_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = devInfo_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devinfoservice.o(.constdata)
</UL>
<P><STRONG><a name="[22]"></a>hard_fault</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, jump_table.o(i.hard_fault))
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[2]"></a>BleUart_ProcessPairStateCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bleuart.o(i.BleUart_ProcessPairStateCB))
<BR>[Address Reference Count : 1]<UL><LI> bleuart.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>BleUart_ProcessPasscodeCB</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bleuart.o(i.BleUart_ProcessPasscodeCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = BleUart_ProcessPasscodeCB &rArr; GAPBondMgr_PasscodeRsp &rArr; GAP_PasscodeUpdate &rArr; SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_PasscodeRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bleuart.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>bleuart_StateNotificationCB</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, bleuart.o(i.bleuart_StateNotificationCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bleuart_StateNotificationCB &rArr; osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_disconnect_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_SetParameter (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bleuart.o(.data)
</UL>
<P><STRONG><a name="[10d]"></a>NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bleuart_protocol.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_query
</UL>

<P><STRONG><a name="[119]"></a>rx_start_timer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bleuart_protocol.o(i.rx_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rx_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_uart_to_BLE_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUP_data_uart_to_BLE
</UL>

<P><STRONG><a name="[234]"></a>uartrx_timeout_timer_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bleuart_protocol.o(i.uartrx_timeout_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartrx_timeout_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_evt_hdl
</UL>

<P><STRONG><a name="[233]"></a>uartrx_timeout_timer_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bleuart_protocol.o(i.uartrx_timeout_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartrx_timeout_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_evt_hdl
</UL>

<P><STRONG><a name="[37]"></a>bleuart_HandleConnStatusCB</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bleuart_service.o(i.bleuart_HandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bleuart_HandleConnStatusCB &rArr; linkDB_State
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bleuart_service.o(i.bleuart_AddService)
</UL>
<P><STRONG><a name="[48]"></a>bleuart_ReadAttrCB</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bleuart_service.o(i.bleuart_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bleuart_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bleuart_service.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>bleuart_WriteAttrCB</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bleuart_service.o(i.bleuart_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bleuart_WriteAttrCB &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bleuart_service.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>gapSendDeviceInitDoneEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gap_configmgr.o(i.gapSendDeviceInitDoneEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBufSizeCmdStatus
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus
</UL>

<P><STRONG><a name="[165]"></a>disconnectNext</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gap_linkmgr.o(i.disconnectNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectCmd (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_FindFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[1be]"></a>gapFreeAuthLink</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gap_linkmgr.o(i.gapFreeAuthLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
</UL>

<P><STRONG><a name="[1c1]"></a>sendAuthEvent</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, gap_linkmgr.o(i.sendAuthEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
</UL>

<P><STRONG><a name="[1cc]"></a>sendTerminateEvent</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gap_linkmgr.o(i.sendTerminateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sendTerminateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[159]"></a>gapAllocAdvRecs</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapAllocAdvRecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapAllocAdvRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
</UL>

<P><STRONG><a name="[153]"></a>gapFreeAdvertState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.gapFreeAdvertState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapFreeAdvertState
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
</UL>

<P><STRONG><a name="[3]"></a>gapPeriProcessHCICmdCompleteEvt</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.gapPeriProcessHCICmdCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gapPeriProcessHCICmdCompleteEvt &rArr; gapWriteAdvEnableStatus &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvDataStatus
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParamsStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peridevmgr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>gapProcessAdvertisingEvt</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapProcessAdvertisingEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapProcessAdvertisingEvt &rArr; GAP_EndDiscoverable
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peridevmgr.o(.data)
</UL>
<P><STRONG><a name="[1d9]"></a>gapSendMakeDiscEvent</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapSendMakeDiscEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapSendMakeDiscEvent &rArr; gapFreeAdvertState
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParamsStatus
</UL>

<P><STRONG><a name="[1db]"></a>isLimitedDiscoverableMode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.isLimitedDiscoverableMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
</UL>

<P><STRONG><a name="[1cf]"></a>gapProcessHCICmdCompleteEvt</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, gap_task.o(i.gapProcessHCICmdCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessHCICmdCompleteEvt &rArr; gapReadBD_ADDRStatus &rArr; gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBufSizeCmdStatus
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[15a]"></a>gapProcessOSALMsg</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, gap_task.o(i.gapProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = gapProcessOSALMsg &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnUpdateCompleteEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[1dd]"></a>gattFindServerInfo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gatt_server.o(i.gattFindServerInfo))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
</UL>

<P><STRONG><a name="[187]"></a>gattGetServerStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_server.o(i.gattGetServerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattGetServerStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[54]"></a>gattProcessExchangeMTUReq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gatt_server.o(i.gattProcessExchangeMTUReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>gattProcessExecuteWriteReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gatt_server.o(i.gattProcessExecuteWriteReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>gattProcessFindByTypeValueReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_server.o(i.gattProcessFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattProcessFindByTypeValueReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>gattProcessFindInfoReq</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, gatt_server.o(i.gattProcessFindInfoReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = gattProcessFindInfoReq &rArr; ATT_FindInfoRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>gattProcessReadByGrpTypeReq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gatt_server.o(i.gattProcessReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gattProcessReadByGrpTypeReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>gattProcessReadByTypeReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_server.o(i.gattProcessReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattProcessReadByTypeReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>gattProcessReadMultiReq</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gatt_server.o(i.gattProcessReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gattProcessReadMultiReq &rArr; GATT_VerifyReadPermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>gattProcessReadReq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gatt_server.o(i.gattProcessReadReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattProcessReadReq &rArr; GATT_VerifyReadPermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>gattProcessWriteReq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gatt_server.o(i.gattProcessWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattProcessWriteReq &rArr; GATT_VerifyWritePermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyWritePermissions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>gattResetServerInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_server.o(i.gattResetServerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattResetServerInfo &rArr; gattStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
</UL>

<P><STRONG><a name="[33]"></a>gattServerHandleConnStatusCB</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gatt_server.o(i.gattServerHandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattServerHandleConnStatusCB &rArr; gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(i.GATT_InitServer)
</UL>
<P><STRONG><a name="[31]"></a>gattServerHandleTimerCB</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gatt_server.o(i.gattServerHandleTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gattServerHandleTimerCB &rArr; gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(i.GATT_Indication)
</UL>
<P><STRONG><a name="[32]"></a>gattServerProcessMsgCB</STRONG> (Thumb, 200 bytes, Stack size 288 bytes, gatt_server.o(i.gattServerProcessMsgCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = gattServerProcessMsgCB &rArr; ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(i.GATT_InitServer)
</UL>
<P><STRONG><a name="[185]"></a>gattServiceLastHandle</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gatt_server.o(i.gattServiceLastHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gattServiceLastHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceNumAttrs
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
</UL>

<P><STRONG><a name="[18f]"></a>gattProcessRxData</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gatt_task.o(i.gattProcessRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = gattProcessRxData &rArr; ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePacket
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent
</UL>

<P><STRONG><a name="[1f5]"></a>l2capProcessRsp</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, l2cap_task.o(i.l2capProcessRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = l2capProcessRsp &rArr; l2capNotifySignal
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStopTimer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseParamUpdateRsp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseCmdReject
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFindLocalId
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[19f]"></a>l2capProcessRxData</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, l2cap_task.o(i.l2capProcessRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = l2capProcessRxData &rArr; l2capProcessSignal &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent
</UL>

<P><STRONG><a name="[1fb]"></a>l2capProcessSignal</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, l2cap_task.o(i.l2capProcessSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = l2capProcessSignal &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseSignalHdr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleRxError
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ParseParamUpdateReq
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[200]"></a>reportStatusChange</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, linkdb.o(i.reportStatusChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reportStatusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
</UL>

<P><STRONG><a name="[8]"></a>smResponderProcessLTKReq</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, sm_rsppairing.o(i.smResponderProcessLTKReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = smResponderProcessLTKReq &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqReplyCmd (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqNegReplyCmd (via Veneer)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_rsppairing.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>smResponderSendNextKeyInfo</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, sm_rsppairing.o(i.smResponderSendNextKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = smResponderSendNextKeyInfo &rArr; smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_rand (via Veneer)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendSingingInfo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityInfo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendEncInfo
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSRK
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetIRK
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddressMode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_rsppairing.o(.data)
</UL>
<P><STRONG><a name="[22e]"></a>smpResponderProcessEncryptionInformation</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sm_rsppairing.o(i.smpResponderProcessEncryptionInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpResponderProcessEncryptionInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[6]"></a>smpResponderProcessIncoming</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, sm_rsppairing.o(i.smpResponderProcessIncoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = smpResponderProcessIncoming &rArr; smpResponderProcessPairingConfirm &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smAuthReqToUint8
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessSigningInfo
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingConfirm
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessMasterID
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessEncryptionInformation
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_rsppairing.o(.data)
</UL>
<P><STRONG><a name="[231]"></a>smpResponderProcessMasterID</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sm_rsppairing.o(i.smpResponderProcessMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpResponderProcessMasterID &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[230]"></a>smpResponderProcessPairingConfirm</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sm_rsppairing.o(i.smpResponderProcessPairingConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = smpResponderProcessPairingConfirm &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[232]"></a>smpResponderProcessSigningInfo</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sm_rsppairing.o(i.smpResponderProcessSigningInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = smpResponderProcessSigningInfo &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[1b4]"></a>smProcessOSALMsg</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sm_task.o(i.smProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = smProcessOSALMsg &rArr; smProcessDataMsg &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
</UL>

<P><STRONG><a name="[181]"></a>ret_check_lenze_app_data</STRONG> (Thumb, 398 bytes, Stack size 288 bytes, gattservapp_simple_chsys_1.o(i.ret_check_lenze_app_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = ret_check_lenze_app_data &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rand (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_simple_WriteAttrCB
</UL>

<P><STRONG><a name="[39]"></a>l2capHandleTimerCB</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capHandleTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = l2capHandleTimerCB &rArr; l2capNotifySignal
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap_util.o(i.l2capSendReq)
</UL>
<P><STRONG><a name="[1ec]"></a>generate_subkey</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sm_mgr.o(i.generate_subkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_128
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncryptLocal
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftshift_onebit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>

<P><STRONG><a name="[1ee]"></a>leftshift_onebit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sm_mgr.o(i.leftshift_onebit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = leftshift_onebit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[205]"></a>smEncrypt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sm_mgr.o(i.smEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>

<P><STRONG><a name="[1ed]"></a>smEncryptLocal</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sm_mgr.o(i.smEncryptLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smEncryptLocal
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[1ae]"></a>sm_CMAC</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, sm_mgr.o(i.sm_CMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_128
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncryptLocal
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[22b]"></a>sm_xor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sm_mgr.o(i.sm_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
</UL>

<P><STRONG><a name="[1ef]"></a>xor_128</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, sm_mgr.o(i.xor_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xor_128
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[208]"></a>smFreePairingParams</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sm_pairing.o(i.smFreePairingParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smFreePairingParams &rArr; smStopRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStopRspTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smLinkCheck
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>

<P><STRONG><a name="[20b]"></a>smSetPairingReqRsp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sm_pairing.o(i.smSetPairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smSetPairingReqRsp &rArr; smUint8ToAuthReq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
</UL>

<P><STRONG><a name="[21e]"></a>smpProcessIncoming</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sm_pairing.o(i.smpProcessIncoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpProcessIncoming
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
